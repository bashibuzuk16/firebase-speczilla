# pdf_api_main.py - –†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
import fastapi
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import shutil
import os
import uuid
import json
import logging
import time
import asyncio
from typing import List, Dict, Any
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="PDF Data Extraction API",
    description="API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
origins = [
    "http://localhost:3000",
    "http://localhost:9002",
    "https://your-nextjs-app.com",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TEMP_UPLOAD_DIR = "temp_pdf_uploads"
TEMP_OUTPUT_DIR_BASE = "temp_pdf_outputs"
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB
ALLOWED_EXTENSIONS = {".pdf"}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(TEMP_UPLOAD_DIR, exist_ok=True)
os.makedirs(TEMP_OUTPUT_DIR_BASE, exist_ok=True)

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF (–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
async def mock_process_pdf_async(pdf_path: str, output_folder: str) -> List[Dict[str, Any]]:
    """
    –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã API
    """
    await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    logger.info(f"Mock –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {pdf_path}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return [
        {
            "id": "gen-1721161200000-0",
            "pos": "–ü1",
            "name": "–ò–¢–ü",
            "type_original": "–ö–∞–Ω.–≤–µ–Ω—Ç. IP54, FRC 60-30",
            "code": "",
            "manufacturer": "",
            "measure": "",
            "quantity": "1",
            "weight": "",
            "note": "",
            "article": "",
            "rag_text": "–∏—Ç–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–Ω.–≤–µ–Ω—Ç. ip54 frc 60-30",
            "artikul": "",
            "category": "–∫–∞–Ω.–≤–µ–Ω—Ç.",
            "sub_category": "",
            "description": "ip54 frc 60-30",
            "material": "",
            "type_extracted": "",
            "connection_type": "",
            "size": "",
            "allies": "",
            "function": "",
            "Artikul_fact": "",
            "potential_artikuls": [],
            "manual_check_needed": True,
            "matching_thoughts": "–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ API (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)",
            "found_in_pdf_on_pages": [1]
        },
        {
            "id": "gen-1721161200000-1",
            "pos": "–ü2",
            "name": "–ü–æ–º–µ—â–µ–Ω–∏—è –æ—Ö—Ä–∞–Ω—ã",
            "type_original": "–ö–∞–Ω.–≤–µ–Ω—Ç. IP54, KVR 100/1",
            "code": "",
            "manufacturer": "",
            "measure": "",
            "quantity": "1",
            "weight": "",
            "note": "",
            "article": "",
            "rag_text": "–ø–æ–º–µ—â–µ–Ω–∏—è –æ—Ö—Ä–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–Ω.–≤–µ–Ω—Ç. ip54 kvr 100/1",
            "artikul": "100/1",
            "category": "–∫–∞–Ω.–≤–µ–Ω—Ç.",
            "sub_category": "",
            "description": "–ø–æ–º–µ—â–µ–Ω–∏—è –æ—Ö—Ä–∞–Ω—ã",
            "material": "",
            "type_extracted": "kvr",
            "connection_type": "",
            "size": "",
            "allies": "",
            "function": "",
            "Artikul_fact": "",
            "potential_artikuls": [],
            "manual_check_needed": True,
            "matching_thoughts": "–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ API (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)",
            "found_in_pdf_on_pages": [1]
        }
    ]

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from Asinc_wirhout_Ocr_Norm import process_pdf_async
    logger.info("‚úÖ –†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    USE_REAL_PROCESSING = True
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É PDF: {e}")
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    process_pdf_async = mock_process_pdf_async
    USE_REAL_PROCESSING = False

# –£—Ç–∏–ª–∏—Ç—ã
def validate_file(file: UploadFile) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not file.filename:
        raise HTTPException(status_code=400, detail="–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    
    file_ext = os.path.splitext(file.filename)[1].lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        raise HTTPException(
            status_code=400, 
            detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
        )

# API endpoints
@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "real_processing": USE_REAL_PROCESSING,
        "mode": "production" if USE_REAL_PROCESSING else "demo"
    }

@app.get("/api/config")
async def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API"""
    return {
        "real_processing_available": USE_REAL_PROCESSING,
        "max_file_size_mb": MAX_FILE_SIZE // (1024 * 1024),
        "supported_formats": list(ALLOWED_EXTENSIONS),
        "mode": "production" if USE_REAL_PROCESSING else "demo"
    }

@app.post("/api/process-pdf-sync/")
async def process_pdf_sync_endpoint(file: UploadFile = File(...)):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    validate_file(file)
    
    unique_id = str(uuid.uuid4())
    temp_pdf_path = os.path.join(TEMP_UPLOAD_DIR, f"{unique_id}_{file.filename}")
    temp_output_dir = os.path.join(TEMP_OUTPUT_DIR_BASE, unique_id)
    os.makedirs(temp_output_dir, exist_ok=True)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file.filename} (—Ä–µ–∂–∏–º: {'production' if USE_REAL_PROCESSING else 'demo'})")

    try:
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(temp_pdf_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_pdf_path}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ (—Ä–µ–∞–ª—å–Ω–∞—è –∏–ª–∏ mock)
        extracted_data = await process_pdf_async(temp_pdf_path, temp_output_dir)
        
        processing_time = round(time.time() - start_time, 2)
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time}s, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_data)} –∑–∞–ø–∏—Å–µ–π")

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        from fastapi.responses import JSONResponse
        response = JSONResponse(content=extracted_data)
        response.headers["X-Processing-Time"] = str(processing_time)
        response.headers["X-Items-Count"] = str(len(extracted_data))
        response.headers["X-Processing-Mode"] = "production" if USE_REAL_PROCESSING else "demo"
        
        return response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            if os.path.exists(temp_pdf_path):
                os.remove(temp_pdf_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_pdf_path}")
        except OSError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        try:
            if os.path.exists(temp_output_dir):
                shutil.rmtree(temp_output_dir)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {temp_output_dir}")
        except OSError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {e}")

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º
@app.post("/api/process-pdf/")
async def process_pdf_endpoint(file: UploadFile = File(...)):
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return await process_pdf_sync_endpoint(file)

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ PDF Data Extraction API...")
    logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"üîß –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'Production (—Ä–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF)' if USE_REAL_PROCESSING else 'Demo (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)'}")
    
    if not USE_REAL_PROCESSING:
        logger.info("‚ÑπÔ∏è  –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF:")
        logger.info("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª Asinc_wirhout_Ocr_Norm.py –¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.info("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GEMINI_API_KEYS –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ")
        logger.info("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
    
    logger.info("üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    logger.info("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
    
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")